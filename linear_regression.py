# -*- coding: utf-8 -*-
"""Linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ei2TnIrN375wfiOTf29EOXeTvlSEt1mQ
"""

import numpy as np
arr  = []


class linear_regression:
    
  # initialising the hyperparameters
  def __init__(self,learning_rate,no_of_iteration):
        
    self.learning_rate=learning_rate
    self.no_of_iteration=no_of_iteration
    
  
  def fit(self,X,Y):

    # here m represent no of training values and n is number of independent variables or features
    self.m , self.n = X.shape         #(30,1)
    # initialising weight array and bias variable i.e model parameter
    self.w = np.zeros(self.n)
    self.b = 0
    # initialising traning data
    self.X = X
    self.Y = Y
    # implementing gradient descent
    for i in range(self.no_of_iteration):
      self.update_weights()

  
  def update_weights(self):

    Y_prediction = self.predict(self.X)
    # calculating gradient
    dw = -(2*(self.X.T).dot(self.Y - Y_prediction))/self.m
    db = -2*np.sum(self.Y - Y_prediction)/self.m
    # updating the weight
    self.w = self.w - self.learning_rate*dw
    self.b = self.b - self.learning_rate*db
    arr.append(self.w)

  
  def predict(self,X):
    return X.dot(self.w) + self.b

